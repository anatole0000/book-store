import { Router } from 'express'; 
import * as bookCtrl from '../controllers/book.controller';
import { authMiddleware } from '../middlewares/auth.middleware';
import { authorizeRoles } from '../middlewares/role.middleware';
import { validate } from '../middlewares/validate'; // ðŸ‘ˆ Middleware validate má»›i
import { CreateBookSchema, UpdateBookSchema } from '../validators/book.validator'; // ðŸ‘ˆ Schema zod
import upload from '../middlewares/upload.middleware';

const router = Router();

router.get('/', bookCtrl.getBooks);
router.get('/:id', bookCtrl.getBookById);

// Chá»‰ admin Ä‘Æ°á»£c táº¡o, sá»­a, xÃ³a sÃ¡ch + validate dá»¯ liá»‡u Ä‘áº§u vÃ o
router.post(
  '/',
  authMiddleware,
  authorizeRoles('admin'),
  upload.single('image'),   
  validate(CreateBookSchema), // ðŸ‘ˆ validate trÆ°á»›c khi vÃ o controller
  bookCtrl.createBook
);

router.put(
  '/:id',
  authMiddleware,
  authorizeRoles('admin'),
  upload.single('image'),
  validate(UpdateBookSchema), // ðŸ‘ˆ validate trÆ°á»›c khi vÃ o controller
  bookCtrl.updateBook
);

router.delete('/:id', authMiddleware, authorizeRoles('admin'), bookCtrl.deleteBook);


router.patch(
  '/:id/status',
  authMiddleware,
  authorizeRoles('admin'),
  bookCtrl.updateBookStatus
);


export default router;
